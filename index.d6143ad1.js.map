{"mappings":"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","sources":["./node_modules/fft.js/lib/fft.js","./src/index.ts","./node_modules/@parcel/scope-hoisting/lib/helpers.js"],"sourcesContent":["'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n","import FFT from 'fft.js';\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst context = canvas.getContext('2d')!;\n\nconst points = new Array<{ x: number, y: number, segmentLength: number }>();\nlet unclosedLength = 0;\nlet unclosedPath = new Path2D();\n\nconst fftSize = 4096;\nconst fft = new FFT(fftSize);\nconst input = fft.createComplexArray() as number[];\nconst output = fft.createComplexArray() as number[];\nconst components = new Array<{ frequency: number, magnitude: number, phase: number }>();\nconst lines = new Array<{ x: number, y: number }>();\nlet parameter = 0;\nlet complexity = 0;\nlet circles = false;\nlet hasCapture = false;\n\nfunction updateCanvasSize() {\n    canvas.width = window.devicePixelRatio * canvas.clientWidth;\n    canvas.height = window.devicePixelRatio * canvas.clientHeight;\n}\n\nwindow.addEventListener('resize', function() { updateCanvasSize(); redraw(); });\nupdateCanvasSize();\n\ncanvas.onpointerdown = function(e) {\n    if (e.button === 0) {\n        hasCapture = true;\n        canvas.setPointerCapture(e.pointerId);\n        addPoint(e.offsetX, e.offsetY);\n    }\n};\n\ncanvas.ontouchstart = canvas.ontouchmove = function(e) {\n    if (e.touches.length === 1) {\n        addPoint(e.changedTouches[0].clientX - canvas.offsetLeft, e.changedTouches[0].clientY - canvas.offsetTop);\n        e.preventDefault();\n    }\n};\n\ncanvas.onpointermove = function(e) {\n    if (hasCapture) addPoint(e.offsetX, e.offsetY);\n};\n\ncanvas.onpointerup = function(e) {\n    if (hasCapture) {\n        hasCapture = false;\n        canvas.releasePointerCapture(e.pointerId);\n    }\n};\n\ndocument.getElementById('clear-button')!.onclick = function() {\n    points.splice(0, points.length);\n    unclosedLength = 0;\n    unclosedPath = new Path2D();\n    components.splice(0, components.length);\n    redraw();\n};\n\nconst parameterSlider = document.getElementById('parameter-slider') as HTMLInputElement;\nparameterSlider.max = (fftSize - 1).toString();\nparameter = parameterSlider.valueAsNumber;\nparameterSlider.oninput = function() {\n    parameter = parameterSlider.valueAsNumber;\n    redraw();\n};\nconst complexityNumber = document.getElementById('complexity-number') as HTMLInputElement;\ncomplexityNumber.max = (fftSize - 1).toString();\ncomplexity = complexityNumber.valueAsNumber;\ncomplexityNumber.oninput = function() {\n    complexity = complexityNumber.valueAsNumber;\n    redraw();\n};\nconst complexityCircles = document.getElementById('complexity-circles-check') as HTMLInputElement;\ncircles = complexityCircles.checked;\ncomplexityCircles.oninput = function() {\n    circles = complexityCircles.checked;\n    redraw();\n};\n\nfunction magnitude(x: number, y: number) { return Math.sqrt(x * x + y * y); }\n\nfunction lerp(first: number, second: number, t: number) { return first + (second - first) * t; }\n\nfunction addPoint(x: number, y: number) {\n    if (points.length === 0) {\n        points.push({ x, y, segmentLength: 0 });\n    } else {\n        const previousPoint = points[Math.max(0, points.length - 2)];\n        const segmentLength = magnitude(x - previousPoint.x, y - previousPoint.y);\n        unclosedLength += segmentLength;\n\n        const addedPoint = { x, y, segmentLength };\n        points.splice(points.length - 1, 0, addedPoint);\n\n        const startAndEndPoint = points[points.length - 1];\n        startAndEndPoint.segmentLength = magnitude(startAndEndPoint.x - x, startAndEndPoint.y - y);\n    }\n\n    unclosedPath.lineTo(x, y);\n\n    if (unclosedLength > 0) {\n        samplePathIntoInput();\n        fft.transform(output, input);\n        calculateSortedComponentsFromOutput();\n    } else {\n        components.splice(0, components.length);\n    }\n\n    redraw();\n}\n\nfunction samplePathIntoInput() {\n    const startAndEndPoint = points[points.length - 1];\n    const closedLength = unclosedLength + startAndEndPoint.segmentLength;\n\n    let lengthIncludingSegment = 0;\n    let previousPoint = startAndEndPoint;\n    let segmentStartSample = 0;\n\n    for (let i = 0; i < points.length; i++) {\n        const point = points[i];\n        lengthIncludingSegment += point.segmentLength;\n\n        const segmentEndSample = Math.round(fftSize * lengthIncludingSegment / closedLength);\n        const segmentSampleLength = segmentEndSample - segmentStartSample + 1;\n\n        for (let s = segmentStartSample; s < segmentEndSample; s++) {\n            const t = (s - segmentStartSample) / segmentSampleLength;\n            input[2 * s] = lerp(previousPoint.x, point.x, t);\n            input[2 * s + 1] = lerp(previousPoint.y, point.y, t);\n        }\n\n        previousPoint = point;\n        segmentStartSample = segmentEndSample;\n    }\n}\n\nfunction calculateSortedComponentsFromOutput() {\n    components.splice(0, components.length);\n\n    for (let i = 0; i < fftSize; i++) {\n        const x = output[2 * i], y = output[2 * i + 1];\n        components.push({\n            frequency: i < fftSize / 2 ? i : i - fftSize,\n            magnitude: magnitude(x, y) / fftSize,\n            phase: Math.atan2(y, x),\n        });\n    }\n\n    components.sort((a, b) => b.magnitude - a.magnitude);\n}\n\nfunction redraw() {\n    context.setTransform(window.devicePixelRatio, 0, 0, window.devicePixelRatio, 0, 0);\n    context.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);\n\n    const closedPath = new Path2D(unclosedPath);\n    closedPath.closePath();\n    context.strokeStyle = 'black';\n    context.stroke(closedPath);\n\n    if (components.length > 0) {\n        let x = 0, y = 0;\n        const maxI = Math.min(components.length, (complexity <= 0 ? components.length : (complexity + 1))), pi2 = 2 * Math.PI, p = (parameter * pi2 / fftSize);\n\n        if (circles) { // Draw arcs?\n            let newX, newY, ray;\n            context.beginPath();\n            for (let i = 0; i < maxI; i++) {\n                const component = components[i];\n                const angle = p * component.frequency + component.phase;\n                newX = x + component.magnitude * Math.cos(angle);\n                newY = y + component.magnitude * Math.sin(angle);\n                if (i >= 1) { // (min first segment)\n                    ray = Math.sqrt(Math.pow(newX - x, 2) + Math.pow(newY - y, 2));\n                    context.moveTo(x, y); // Move to the center, drawing a line to the right most circle point (0°)\n                    context.arc(x, y, ray, 0, pi2); // Draw the circle starting from 0 rad (0°) to 2*PI rad (360°)\n                    // context.arc do take the x-rightmost point as 0rad, and pathes cursor from the previous position to the modulated position of the center+ray distance circle.\n                    // context.arc(A, B, Math.Pi, 2 * Math.Pi) will draw a top-half circle (having it's center on [A, B]), with a line reaching [A, B] if the cursor was not already on this position.\n                    // ^ There is no use to begin circles from the [new_x, new_y] point, as it'd still require the ray calculation, and introduces a new angle -> angle + 2*PI calculation.\n                } else {\n                    lines.splice(0, lines.length); // Reset lines\n                }\n                lines.push({ x: newX, y: newY }); // Draw the line starting from old to new coords\n\n                x = newX;\n                y = newY;\n            }\n            context.strokeStyle = 'burlywood';\n            context.stroke();\n\n            context.beginPath();\n            context.moveTo(lines[0].x, lines[0].y);\n            for (let i = 1; i < lines.length; i++) {\n                context.lineTo(lines[i].x, lines[i].y);\n            }\n            context.strokeStyle = 'red';\n            context.stroke();\n\n            lines.splice(0, lines.length); // Reset lines\n        } else {\n            context.beginPath();\n            drawComponentsLineIn(maxI, p);\n            context.strokeStyle = 'red';\n            context.stroke();\n        }\n\n        if (complexity > 0) { // Show complexity path\n            context.beginPath();\n            for (let cp = 0; cp < fftSize; cp++) {\n                drawComponentsLineOut(maxI, (cp * pi2 / fftSize));\n            }\n            drawComponentsLineOut(maxI, 0); // End loop\n            context.strokeStyle = 'green';\n            context.stroke();\n        }\n    }\n\n    function drawComponentsLineIn(maxI, p) {\n        let x = 0, y = 0;\n        for (let i = 0; i < maxI; i++) {\n            const component = components[i];\n            const angle = p * component.frequency + component.phase;\n            x += component.magnitude * Math.cos(angle);\n            y += component.magnitude * Math.sin(angle);\n            context.lineTo(x, y);\n        }\n    }\n\n    function drawComponentsLineOut(maxI, p) {\n        let x = 0, y = 0;\n        for (let i = 0; i < maxI; i++) {\n            const component = components[i];\n            const angle = p * component.frequency + component.phase;\n            x += component.magnitude * Math.cos(angle);\n            y += component.magnitude * Math.sin(angle);\n        }\n        context.lineTo(x, y);\n    }\n}\n","function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n"],"names":["FFT","size","this","Error","_csize","table","Array","i","length","angle","Math","PI","cos","sin","power","t","_width","_bitrev","j","shift","revShift","_out","_data","_inv","$b018759d1259780902942b1a1cf37636$exports","prototype","fromComplexArray","complex","storage","res","createComplexArray","toComplexArray","input","completeSpectrum","spectrum","half","transform","out","data","_transform4","realTransform","_realTransform4","inverseTransform","outOff","step","len","bitrev","off","_singleTransform2","_singleTransform4","inv","quarterLen","limit","k","A","B","C","D","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","_singleRealTransform2","_singleRealTransform4","halfLen","hquarterLen","SFAr","SFAi","SFBr","SFBi","SA","SB","a","canvas","document","getElementById","context","getContext","points","unclosedLength","unclosedPath","Path2D","fftSize","fft","__esModule","default","output","components","lines","parameter","complexity","circles","hasCapture","updateCanvasSize","width","window","devicePixelRatio","clientWidth","height","clientHeight","addEventListener","redraw","onpointerdown","e","button","setPointerCapture","pointerId","addPoint","offsetX","offsetY","ontouchstart","ontouchmove","touches","changedTouches","clientX","offsetLeft","clientY","offsetTop","preventDefault","onpointermove","onpointerup","releasePointerCapture","onclick","splice","parameterSlider","max","toString","valueAsNumber","oninput","complexityNumber","complexityCircles","magnitude","x","y","sqrt","lerp","first","second","push","segmentLength","previousPoint","addedPoint","startAndEndPoint","lineTo","closedLength","lengthIncludingSegment","segmentStartSample","point","segmentEndSample","round","segmentSampleLength","s","samplePathIntoInput","frequency","phase","atan2","sort","b","calculateSortedComponentsFromOutput","setTransform","clearRect","closedPath","closePath","strokeStyle","stroke","maxI","min","pi2","p","newX","newY","ray","beginPath","component","pow","moveTo","arc","drawComponentsLineIn","cp","drawComponentsLineOut","checked"],"version":3,"file":"index.d6143ad1.js.map"}